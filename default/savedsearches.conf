[MITRE ATT&CK All Rules and Techniques Lookup Gen]
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.track = 0
cron_schedule = 1 0 * * *
enableSched = 1
search = | rest /services/configs/conf-analyticstories \
| where annotations!="" \
| spath input=annotations path=mitre_attack{} output=mitre_attack \
| eval rule_name=ltrim(title,"savedsearch://") \
| search NOT [| outputlookup mitre_user_rule_technique_lookup append=true create_empty=true] \
| search NOT [| outputlookup mitre_app_rule_technique_lookup append=true] \
| fields rule_name,mitre_attack \
| join rule_name \
    [| rest /services/configs/conf-analyticstories \
    | where searches!="" \
    | eval rule_name=searches \
    | table title,rule_name \
    | eval rule_name=trim(rule_name,"[") \
    | eval rule_name=trim(rule_name,"]") \
    | eval rule_name=split(rule_name,",") \
    | mvexpand rule_name \
    | eval rule_name=trim(rule_name," ") \
    | eval rule_name=trim(rule_name,"\"")\
        ] \
| append \
    [| rest services/configs/conf-savedsearches \
    | eval rule_name=title \
    | search action.correlationsearch.annotations="*" \
    | spath input=action.correlationsearch.annotations path=mitre_attack{} output=mitre_attack \
    | fields rule_name, mitre_attack] \
| eval technique_name = if(match(mitre_attack,"^T\d\d\d"),null(), mitre_attack)\
| lookup mitre_tt_lookup technique_name OUTPUT technique_id as tmp_id0\
| eval tmp_id1 = if(match(mitre_attack,"^T\d\d\d"), mitre_attack, null())\
| eval technique_id=coalesce(tmp_id0, tmp_id1)\
| where NOT isnull(technique_id) \
| table rule_name, technique_id \
| inputlookup mitre_user_rule_technique_lookup append=true \
| inputlookup mitre_app_rule_technique_lookup append=true \
| makemv tokenizer="([^\n\s]+)" technique_id \
| mvexpand technique_id \
| dedup rule_name,technique_id \
| join rule_name \
    [| rest services/configs/conf-savedsearches \
    | eval rule_name=title \
    | eval rule_disabled=disabled \
    | rename eai:acl.app as app_name\
    | table rule_name,app_name, rule_disabled\
        ] \
| eval subtechnique_id=if(match(technique_id,"\."),technique_id,null())\
| eval technique_id=if(match(technique_id,"\."),replace(technique_id,"\.\d+",""),technique_id)\
| eval technique_id=mvappend(technique_id,subtechnique_id)\
| mvexpand technique_id\
| dedup rule_name, technique_id, rule_disabled\
| append [| inputlookup padas_rules_lookup | rename name as rule_name, mitreAnnotations as technique_id | eval app_name="TA-padas", rule_disabled=if(enabled=1, 0, 1) | table rule_name, app_name, technique_id, rule_disabled] \
| table rule_name, app_name, technique_id, rule_disabled\
| outputlookup mitre_all_rule_technique_lookup

[MITRE ATT&CK Compliance Lookup Gen]
action.email.useNSSubject = 1
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.track = 0
cron_schedule = 5 0 * * *
description = This lookup generator relies on mitre_all_rule_technique_lookup in order to generate a new lookup to properly display MITRE ATT&CK Compliance martix.
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DA-ESS-MitreContent
request.ui_dispatch_view = search
search = | inputlookup mitre_all_rule_technique_lookup \
| `lookup_technique_tactic_from_rule_name` \
| mvexpand rule_disabled\
| dedup rule_name, technique_id, rule_disabled\
| stats values(technique_id) as technique_id by rule_name, rule_disabled \
| stats count,count(eval(rule_disabled="0")) as enabled_count by technique_id\
| eval enabled_percentage=((enabled_count/count)*100) \
| lookup mitre_tt_lookup technique_id\
| mvexpand technique_name \
| dedup technique_id \
| table technique_id, technique_name, enabled_percentage, enabled_count, count \
| outputlookup mitre_all_rule_compliance_lookup

[MITRE ATT&CK User Rules Compliance Lookup Gen]
action.email.useNSSubject = 1
action.keyindicator.invert = 0
action.makestreams.param.verbose = 0
action.nbtstat.param.verbose = 0
action.notable.param.verbose = 0
action.nslookup.param.verbose = 0
action.ping.param.verbose = 0
action.risk.param.verbose = 0
action.send2uba.param.verbose = 0
action.threat_add.param.verbose = 0
alert.track = 0
cron_schedule = 7 0 * * *
description = This lookup generator relies on mitre_all_rule_technique_lookup in order to generate a new lookup to properly display MITRE ATT&CK Compliance martix with user-defined rules only.
dispatch.earliest_time = -24h@h
dispatch.latest_time = now
display.general.timeRangePicker.show = 0
display.general.type = statistics
display.page.search.tab = statistics
display.visualizations.show = 0
enableSched = 1
request.ui_dispatch_app = DA-ESS-MitreContent
request.ui_dispatch_view = search
search = | inputlookup mitre_all_rule_technique_lookup \
| eval app_rule=app_name."::".rule_name \
| search NOT \
    [| inputlookup mitre_default_rule_lookup \
    | eval app_rule=app_name."::".rule_name \
    | fields app_rule] \
| `lookup_technique_tactic_from_rule_name` \
| mvexpand rule_disabled\
| dedup rule_name, technique_id, rule_disabled\
| stats values(technique_id) as technique_id by rule_name, rule_disabled \
| stats count,count(eval(rule_disabled="0")) as enabled_count by technique_id\
| eval enabled_percentage=((enabled_count/count)*100) \
| lookup mitre_tt_lookup technique_id\
| mvexpand technique_name \
| dedup technique_id \
| table technique_id, technique_name, enabled_percentage, enabled_count, count\
| outputlookup mitre_user_rule_compliance_lookup

[AttackDetection - Execution with AT - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Execution with AT
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process
action.notable.param.rule_description = In order to gain persistence, privilege escalation, or remote execution, an adversary may use the Windows built-in command AT (at.exe) to schedule a command to be run at a specified time, date, and even host.  - MITRE ATT&CK Techniques: T1053
action.notable.param.rule_title = AttackDetection - Execution with AT - For fields: $process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = In order to gain persistence, privilege escalation, or remote execution, an adversary may use the Windows built-in command AT (at.exe) to schedule a command to be run at a specified time, date, and even host.  - MITRE ATT&CK Techniques: T1053
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_path = "C:\\Windows\\*\\at.exe" by Processes.process_name Processes.process_path Processes.process Processes.parent_process_name Processes.dest Processes.user  | `drop_dm_object_name(Processes)`  | `security_content_ctime(firstTime)`  | `security_content_ctime(lastTime)`

[AttackDetection - Running executables with same hash and different names - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Running executables with same hash and different names
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process
action.notable.param.rule_description = Executables are generally not renamed, thus a given hash of an executable should only have ever one name. - MITRE ATT&CK Techniques: T1036
action.notable.param.rule_title = AttackDetection - Running executables with same hash and different names - For fields: $process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Executables are generally not renamed, thus a given hash of an executable should only have ever one name. - MITRE ATT&CK Techniques: T1036
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime dc(Processes.process_hash) as dc_num_hashes FROM datamodel=Endpoint.Processes by Processes.user Processes.dest Processes.process_name Processes.process_id Processes.process_path Processes.parent_process_name Processes.process_hash  | where dc_num_hashes > 1 | `drop_dm_object_name("Processes")`  | `security_content_ctime(firstTime)`  | `security_content_ctime(lastTime)`

[AttackDetection - Active Directory Dumping via NTDSUtil - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Active Directory Dumping via NTDSUtil
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = file_name,process_name
action.notable.param.rule_description = The NTDSUtil tool may be used to dump a Microsoft Active Directory database to disk for processing with a credential access tool such as Mimikatz. - MITRE ATT&CK Techniques: T1003
action.notable.param.rule_title = AttackDetection - Active Directory Dumping via NTDSUtil - For fields: $file_name$ $process_name$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = The NTDSUtil tool may be used to dump a Microsoft Active Directory database to disk for processing with a credential access tool such as Mimikatz. - MITRE ATT&CK Techniques: T1003
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Filesystem WHERE Filesystem.file_name="*ntds.dit" AND Filesystem.action="created" BY Filesystem.user, Filesystem.dest, Filesystem.file_name, Filesystem.file_path, Filesystem.process_guid, Filesystem.action \
| `drop_dm_object_name(Filesystem)` \
| join process_guid \
    [| tstats count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process_name="*ntdsutil.exe" BY Processes.user, Processes.dest, Processes.process_name, Processes.process_path, Processes.parent_process_name, Processes.process_guid \
    | `drop_dm_object_name(Processes)`] \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Squiblydoo - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Squiblydoo
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process
action.notable.param.rule_description = Squiblydoo is a specific usage of regsvr32.dll to load a COM scriptlet directly from the internet and execute it in a way that bypasses application whitelisting. - MITRE ATT&CK Techniques: T1218
action.notable.param.rule_title = AttackDetection - Squiblydoo - For fields: $process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Squiblydoo is a specific usage of regsvr32.dll to load a COM scriptlet directly from the internet and execute it in a way that bypasses application whitelisting. - MITRE ATT&CK Techniques: T1218
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process_path="*regsvr32.exe" AND Processes.process="*scrobj.dll" BY Processes.user, Processes.dest, Processes.process_name, Processes.process, Processes.process_path, Processes.parent_process_name, Processes.process_id \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Services launching Cmd - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Services launching Cmd
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec,parent_process_exec
action.notable.param.rule_description = To be a legitimate service, a process (or DLL) must have the appropriate service entry point SvcMain. If an application does not have the entry point, then it will timeout (default is 30 seconds) and the process will be killed. To survive the timeout, adversaries and red teams can create services that direct to cmd.exe with the flag /c, followed by the desired command - MITRE ATT&CK Techniques: T1543
action.notable.param.rule_title = AttackDetection - Services launching Cmd - For fields: $process_exec$ $parent_process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = To be a legitimate service, a process (or DLL) must have the appropriate service entry point SvcMain. If an application does not have the entry point, then it will timeout (default is 30 seconds) and the process will be killed. To survive the timeout, adversaries and red teams can create services that direct to cmd.exe with the flag /c, followed by the desired command - MITRE ATT&CK Techniques: T1543
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.action="allowed" AND  Processes.process_exec="cmd.exe" AND Processes.parent_process_exec="services.exe" BY Processes.user, Processes.dest, Processes.action, Processes.process_name, Processes.process, Processes.process_path, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Credential Dumping via Windows Task Manager - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Credential Dumping via Windows Task Manager
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = file_name,process_name
action.notable.param.rule_description = The Windows Task Manager may be used to dump the memory space of lsass.exe to disk for processing with a credential access tool such as Mimikatz. - MITRE ATT&CK Techniques: T1003
action.notable.param.rule_title = AttackDetection - Credential Dumping via Windows Task Manager - For fields: $file_name$ $process_name$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = The Windows Task Manager may be used to dump the memory space of lsass.exe to disk for processing with a credential access tool such as Mimikatz. - MITRE ATT&CK Techniques: T1003
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count FROM datamodel=Endpoint.Filesystem WHERE Filesystem.file_name="*lsass*.dmp" AND Filesystem.action="created" BY Filesystem.user, Filesystem.dest, Filesystem.file_name, Filesystem.file_path, Filesystem.process_guid, Filesystem.action \
| `drop_dm_object_name(Filesystem)` \
| join process_guid \
    [| tstats count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process_name="taskmgr.exe" BY Processes.user, Processes.dest, Processes.process_name, Processes.process_path, Processes.parent_process_name, Processes.process_guid \
    | `drop_dm_object_name(Processes)`] \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - UAC Bypass - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - UAC Bypass
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process,parent_process
action.notable.param.rule_description = Bypassing user account control (UAC Bypass) is generally done by piggybacking on a system process that has auto-escalate privileges. This analytic looks to detect those cases as described by the open-source UACME tool. - MITRE ATT&CK Techniques: T1548
action.notable.param.rule_title = AttackDetection - UAC Bypass - For fields: $process$ $parent_process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Bypassing user account control (UAC Bypass) is generally done by piggybacking on a system process that has auto-escalate privileges. This analytic looks to detect those cases as described by the open-source UACME tool. - MITRE ATT&CK Techniques: T1548
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE Processes.process_integrity_level=high  AND (Processes.parent_process_path=c:\\windows\\system32\\fodhelper.exe OR (Processes.process="\"c:\\windows\\system32\\wusa.exe\"*/quiet*" AND Processes.user!=NOT_TRANSLATED AND Processes.parent_process_path!=c:\\windows\\explorer.exe) OR Processes.process="*.exe\"*cleanmgr.exe /autoclean*" OR (Processes.parent_process_path="c:\\windows\\*dccw.exe" AND Processes.process_path!="c:\\windows\\system32\\cttune.exe") OR Processes.process_path="c:\\program files\\windows media player\\osk.exe" OR Processes.parent_process_path="c:\\windows\\system32\\slui.exe" OR (Processes.parent_process="\"c:\\windows\\system32\\dism.exe\\*.xml" AND Processes.process_path!="c:\\users\\*\\appdata\\local\\temp\\*\\dismhost.exe"))\
    BY Processes.user, Processes.dest, Processes.process_name, Processes.process, Processes.process_path, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Command Launched from WinLogon - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Command Launched from WinLogon
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process,parent_process
action.notable.param.rule_description = An adversary can use accessibility features (Ease of Access), such as StickyKeys or Utilman, to launch a command shell from the logon screen and gain SYSTEM access. - MITRE ATT&CK Techniques: T1546
action.notable.param.rule_title = AttackDetection - Command Launched from WinLogon - For fields: $process$ $parent_process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = An adversary can use accessibility features (Ease of Access), such as StickyKeys or Utilman, to launch a command shell from the logon screen and gain SYSTEM access. - MITRE ATT&CK Techniques: T1546
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.action="allowed" AND  Processes.process_exec="cmd.exe" AND Processes.parent_process_exec="winlogon.exe" BY Processes.user, Processes.dest, Processes.action, Processes.process_name, Processes.process, Processes.process_path, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Host Discovery Commands - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Host Discovery Commands
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_name,process
action.notable.param.rule_description = When entering on a host for the first time, an adversary may try to discover information about the host. There are several built-in Windows commands that can be used to learn about the software configurations, active users, administrators, and networking configuration. These commands should be monitored to identify when an adversary is learning information about the system and environment. - MITRE ATT&CK Techniques: T1087 T1069 T1016 T1082 T1033 T1057 T1007
action.notable.param.rule_title = AttackDetection - Host Discovery Commands - For fields: $process_name$ $process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = When entering on a host for the first time, an adversary may try to discover information about the host. There are several built-in Windows commands that can be used to learn about the software configurations, active users, administrators, and networking configuration. These commands should be monitored to identify when an adversary is learning information about the system and environment. - MITRE ATT&CK Techniques: T1087 T1069 T1016 T1082 T1033 T1057 T1007
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
WHERE Processes.action="allowed" AND  (Processes.process_exec="hostname.exe" OR Processes.process_exec="ipconfig.exe" OR Processes.process_exec="net.exe" OR Processes.process_exec="quser.exe" OR Processes.process_exec="qwinsta.exe" OR Processes.process_exec="systeminfo.exe" OR Processes.process_exec="tasklist.exe" OR Processes.process_exec="whoami.exe" OR (Processes.process_exec="sc.exe" AND (Processes.process="* query *" OR Processes.process="* qc *")))\
BY Processes.user, Processes.dest, Processes.action, Processes.process_name, Processes.process, Processes.process_path, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Create Remote Process via WMIC - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Create Remote Process via WMIC
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec, process
action.notable.param.rule_description = Adversaries may use Windows Management Instrumentation (WMI) to move laterally, by launching executables remotely. - MITRE ATT&CK Techniques: T1047
action.notable.param.rule_title = AttackDetection - Create Remote Process via WMIC - For fields: $process_exec$ $ process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may use Windows Management Instrumentation (WMI) to move laterally, by launching executables remotely. - MITRE ATT&CK Techniques: T1047
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.process_exec="wmic.exe" AND Processes.process="* process call create *" AND Processes.process="* /node:*" BY Processes.user, Processes.dest, Processes.process_name, Processes.process, Processes.process_exec, Processes.process_path, Processes.parent_process_name, Processes.process_id \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Generic Regsvr32: Main Pattern - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Generic Regsvr32: Main Pattern
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, parent_process
action.notable.param.rule_description = Regsvr32 can be used to execute arbitrary code in the context of a Windows signed binary, which can be used to bypass application whitelisting. This analytic looks for suspicious usage of the tool. - MITRE ATT&CK Techniques: T1218
action.notable.param.rule_title = AttackDetection - Generic Regsvr32: Main Pattern - For fields: $process$ $ parent_process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Regsvr32 can be used to execute arbitrary code in the context of a Windows signed binary, which can be used to bypass application whitelisting. This analytic looks for suspicious usage of the tool. - MITRE ATT&CK Techniques: T1218
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE Processes.action=allowed AND Processes.process_path!="*regsvr32.exe" AND Processes.parent_process_path="*regsvr32.exe" \
    BY Processes.user, Processes.dest, Processes.process_name, Processes.process, Processes.process_path, Processes.process_exec, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path, Processes.parent_process_exec\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Generic Regsvr32: Spawning Child Processes - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Generic Regsvr32: Spawning Child Processes
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, parent_process
action.notable.param.rule_description = Regsvr32 can be used to execute arbitrary code in the context of a Windows signed binary, which can be used to bypass application whitelisting. This analytic looks for suspicious usage of the tool. - MITRE ATT&CK Techniques: T1218
action.notable.param.rule_title = AttackDetection - Generic Regsvr32: Spawning Child Processes - For fields: $process$ $ parent_process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Regsvr32 can be used to execute arbitrary code in the context of a Windows signed binary, which can be used to bypass application whitelisting. This analytic looks for suspicious usage of the tool. - MITRE ATT&CK Techniques: T1218
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE Processes.action=allowed \
    AND (Processes.parent_process_path="C:\\Windows\\System32\\regsvr32.exe" OR Processes.parent_process_path="C:\\Windows\\SysWOW64\\regsvr32.exe") \
    AND Processes.process_path!="C:\\Windows\\System32\\regsvr32.exe" \
    AND Processes.process_path!="C:\\Windows\\SysWOW64\\regsvr32.exe" \
    AND Processes.process_path!="C:\\Windows\\SysWOW64\\WerFault.exe" \
    AND Processes.process_path!="C:\\Windows\\System32\\wevtutil.exe" \
    AND Processes.process_path!="C:\\Windows\\System32\\WerFault.exe" \
    BY Processes.user, Processes.dest, Processes.process_name, Processes.process, Processes.process_path, Processes.process_exec, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path, Processes.parent_process_exec \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Powershell Execution - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Powershell Execution
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, parent_process
action.notable.param.rule_description = PowerShell is a scripting environment included with Windows that is used by both attackers and administrators. Execution of PowerShell scripts in most Windows versions is opaque and not typically secured by antivirus which makes using PowerShell an easy way to circumvent security measures. This analytic detects execution of PowerShell scripts. - MITRE ATT&CK Techniques: T1059
action.notable.param.rule_title = AttackDetection - Powershell Execution - For fields: $process$ $ parent_process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = PowerShell is a scripting environment included with Windows that is used by both attackers and administrators. Execution of PowerShell scripts in most Windows versions is opaque and not typically secured by antivirus which makes using PowerShell an easy way to circumvent security measures. This analytic detects execution of PowerShell scripts. - MITRE ATT&CK Techniques: T1059
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE Processes.action=allowed \
    AND Processes.process_path="C:\\Windows\\*\\powershell.exe" \
    AND Processes.parent_process_path!="C:\\Windows\\explorer.exe" \
    BY Processes.user, Processes.dest, Processes.process_name, Processes.process, Processes.process_path, Processes.process_exec, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path, Processes.parent_process_exec \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Suspicious Arguments - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Suspicious Arguments
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process
action.notable.param.rule_description = Malicious actors may rename built-in commands or external tools, such as those provided by SysInternals, to better blend in with the environment. Any tool of interest with commonly known command line usage can be detecting by command line analysis (PuTTY, port forwarding, scp, mimikatz, RAR, archive) - excluding IP address search. - MITRE ATT&CK Techniques: T1003 T1021 T1105
action.notable.param.rule_title = AttackDetection - Suspicious Arguments - For fields: $process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Malicious actors may rename built-in commands or external tools, such as those provided by SysInternals, to better blend in with the environment. Any tool of interest with commonly known command line usage can be detecting by command line analysis (PuTTY, port forwarding, scp, mimikatz, RAR, archive) - excluding IP address search. - MITRE ATT&CK Techniques: T1003 T1021 T1105
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE Processes.action=allowed \
    AND (Processes.process="* -R * -pw*" OR Processes.process="* -pw * *@*" OR Processes.process="*sekurlsa*" OR Processes.process="* -hp *" OR Processes.process="* a *" OR Processes.process="* -lcq*")\
    BY Processes.user, Processes.dest, Processes.process_name, Processes.process, Processes.process_path, Processes.process_exec, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path, Processes.parent_process_exec \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Lsass Process Dump via Procdump: Process Create - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Lsass Process Dump via Procdump: Process Create
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process
action.notable.param.rule_description = ProcDump is a sysinternal command-line utility whose primary purpose is monitoring an application for CPU spikes and generating crash dumps.  ProcDump may be used to dump the memory space of lsass.exe to disk for processing with a credential access tool such as Mimikatz. - MITRE ATT&CK Techniques: T1003
action.notable.param.rule_title = AttackDetection - Lsass Process Dump via Procdump: Process Create - For fields: $process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = ProcDump is a sysinternal command-line utility whose primary purpose is monitoring an application for CPU spikes and generating crash dumps.  ProcDump may be used to dump the memory space of lsass.exe to disk for processing with a credential access tool such as Mimikatz. - MITRE ATT&CK Techniques: T1003
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE Processes.action=allowed \
    AND Processes.process_path="*\\procdump*.exe"\
    AND Processes.process="*lsass*"\
    BY Processes.user, Processes.dest, Processes.process_name, Processes.process, Processes.process_path, Processes.process_exec, Processes.parent_process_name, Processes.parent_process, Processes.parent_process_path, Processes.parent_process_exec \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - User Activity from Clearing Event Logs (Security) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - User Activity from Clearing Event Logs (Security)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = signature_id, signature
action.notable.param.rule_description = It is likely that malicious attackers may try to cover their tracks by clearing an event log. When an event log gets cleared, it is suspicious. Alerting when a “Clear Event Log” is generated could point to this intruder technique. - MITRE ATT&CK Techniques: T1070
action.notable.param.rule_title = AttackDetection - User Activity from Clearing Event Logs (Security) - For fields: $signature_id$ $ signature$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = It is likely that malicious attackers may try to cover their tracks by clearing an event log. When an event log gets cleared, it is suspicious. Alerting when a “Clear Event Log” is generated could point to this intruder technique. - MITRE ATT&CK Techniques: T1070
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count earliest(_time) as earliest latest(_time) as latest from datamodel=Event_Signatures.Signatures where source="*WinEventLog:Security*" AND (Signatures.signature_id=1100 OR Signatures.signature_id=1102) by source, Signatures.dest, Signatures.signature_id , Signatures.signature \
| `security_content_ctime(earliest)` \
| `security_content_ctime(latest)` \
| `drop_dm_object_name("Signatures")`

[AttackDetection - Simultaneous Logins on a Host - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Simultaneous Logins on a Host
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = signature_id, src_user
action.notable.param.rule_description = Multiple users logged into a single machine at the same time, or even within the same hour, do not typically occur in networks we have observed. - MITRE ATT&CK Techniques: T1078
action.notable.param.rule_title = AttackDetection - Simultaneous Logins on a Host - For fields: $signature_id$ $ src_user$
action.notable.param.security_domain = access
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Multiple users logged into a single machine at the same time, or even within the same hour, do not typically occur in networks we have observed. - MITRE ATT&CK Techniques: T1078
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` dc(Authentication.src_user) as count earliest(_time) as earliest latest(_time) as latest from datamodel=Authentication where Authentication.signature_id=4624 by Authentication.dest \
| `drop_dm_object_name("Authentication")` \
| eval time_diff=round((latest-earliest)/3600) \
| where count>1 AND time_diff<=1

[AttackDetection - Execution with schtasks - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Execution with schtasks
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec, dest, user, process
action.notable.param.rule_description = Scheduled tasks tool can be used to gain Persistence and can be used in combination with a Lateral Movement technique to remotely gain execution.  - MITRE ATT&CK Techniques: T1053
action.notable.param.rule_title = AttackDetection - Execution with schtasks - For fields: $process_exec$ $ dest$ $ user$ $ process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Scheduled tasks tool can be used to gain Persistence and can be used in combination with a Lateral Movement technique to remotely gain execution.  - MITRE ATT&CK Techniques: T1053
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = |tstats `security_content_summariesonly` count from datamodel=Endpoint.Processes where Processes.process_exec="schtasks.exe" by Processes.user, Processes.dest, Processes.process\
|`drop_dm_object_name("Processes")`\
| eval is_suspicious=case(match(process,".*(\/create|\/run|\/query|\/delete|\/change|\/end).*"),1)\
| where is_suspicious=1

[AttackDetection - Quick execution of a series of suspicious commands - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Quick execution of a series of suspicious commands
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec, dest, parent_process_id
action.notable.param.rule_description = Certain commands are frequently used by malicious actors and infrequently used by normal users. By looking for execution of these commands in short periods of time, we can not only see when a malicious user was on the system but also get an idea of what they were doing. - MITRE ATT&CK Techniques: T1087 T1003  T1069 T1057 T1021 T1543 T1112 T1574 T1018 T1569 T1053 T1029 T1033 T1007 T1082 T1049 T1016 T1010 T1518 T1046 T1562 T1098 T1059 T1012
action.notable.param.rule_title = AttackDetection - Quick execution of a series of suspicious commands - For fields: $process_exec$ $ dest$ $ parent_process_id$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Certain commands are frequently used by malicious actors and infrequently used by normal users. By looking for execution of these commands in short periods of time, we can not only see when a malicious user was on the system but also get an idea of what they were doing. - MITRE ATT&CK Techniques: T1087 T1003  T1069 T1057 T1021 T1543 T1112 T1574 T1018 T1569 T1053 T1029 T1033 T1007 T1082 T1049 T1016 T1010 T1518 T1046 T1562 T1098 T1059 T1012
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = |tstats `security_content_summariesonly` values(Processes.process_exec) as process_values count from datamodel=Endpoint.Processes where Processes.process_exec IN (“arp.exe", "at.exe", "attrib.exe", "cscript.exe", "dsquery.exe", "hostname.exe", "ipconfig.exe", "mimikatz.exe", "nbstat.exe", "net.exe", "netsh.exe", "nslookup.exe", "ping.exe", "quser.exe", "qwinsta.exe", "reg.exe", "runas.exe", "sc.exe", "schtasks.exe", "ssh.exe", "systeminfo.exe", "taskkill.exe", "telnet.exe", "tracert.exe", "wscript.exe", "xcopy.exe”) by Processes.dest,  Processes.parent_process_id, _time span=30m \
|`drop_dm_object_name("Processes")`\
| eval n_up=mvcount(process_values)\
| where n_up>1

[AttackDetection - Reg.exe called from Command Shell - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Reg.exe called from Command Shell
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = dest, process_exec, process_id, parent_process_exec, parent_process_id
action.notable.param.rule_description = The built-in utility reg.exe provides a command-line interface to the registry, so that queries and modifications can be performed from a shell, such as cmd.exe. When a user is responsible for these actions, the parent of cmd.exe will likely be explorer.exe. If it is not, the process tree might be malicious.\
 - MITRE ATT&CK Techniques: T1012 T1112 T1547 T1574
action.notable.param.rule_title = AttackDetection - Reg.exe called from Command Shell - For fields: $dest$ $ process_exec$ $ process_id$ $ parent_process_exec$ $ parent_process_id$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = The built-in utility reg.exe provides a command-line interface to the registry, so that queries and modifications can be performed from a shell, such as cmd.exe. When a user is responsible for these actions, the parent of cmd.exe will likely be explorer.exe. If it is not, the process tree might be malicious.\
 - MITRE ATT&CK Techniques: T1012 T1112 T1547 T1574
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count from datamodel=Endpoint.Processes where (Processes.process_exec="reg.exe" AND Processes.parent_process_exec="cmd.exe") by Processes.dest, Processes.process_exec, Processes.parent_process_exec, Processes.process_id, Processes.parent_process_id \
| `drop_dm_object_name("Processes")` \
| eval reg_ppid=case((process_exec="reg.exe" AND parent_process_exec="cmd.exe"),parent_process_id) \
| table parent_process_exec, parent_process_id, reg_ppid, dest \
| join dest \
    [| tstats `security_content_summariesonly` count from datamodel=Endpoint.Processes where (Processes.process_exec="cmd.exe" AND Processes.parent_process_exec!="explorer.exe") by Processes.dest, Processes.process_exec, Processes.parent_process_exec, Processes.process_id, Processes.parent_process_id \
    | `drop_dm_object_name("Processes")` \
    | eval cmd_pid=case((process_exec="cmd.exe" AND parent_process_exec!="explorer.exe"),process_id) \
    | table process_exec, process_id, cmd_pid,dest] \
| table reg_ppid, cmd_pid, dest \
| where reg_ppid=cmd_pid

[AttackDetection - Remote PowerShell Sessions - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Remote PowerShell Sessions
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = parent_process_exec, process_exec, user
action.notable.param.rule_description = According to ATT&CK, PowerShell can be used over WinRM to remotely run commands on a host. When a remote PowerShell session starts, svchost.exe executes wsmprovhost.exe\
\
 - MITRE ATT&CK Techniques: T1059 T1021
action.notable.param.rule_title = AttackDetection - Remote PowerShell Sessions - For fields: $parent_process_exec$ $ process_exec$ $ user$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = According to ATT&CK, PowerShell can be used over WinRM to remotely run commands on a host. When a remote PowerShell session starts, svchost.exe executes wsmprovhost.exe\
\
 - MITRE ATT&CK Techniques: T1059 T1021
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` min(_time) as firstTime, max(_time) as lastTime, count FROM datamodel=Endpoint.Processes WHERE ("Processes.parent_process_exec"="svchost.exe" "Processes.process_exec"="wsmprovhost.exe") BY host, "Processes.parent_process_exec", "Processes.process_exec", "Processes.user" \
|`drop_dm_object_name(Processes)`\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - User Logged in to Multiple Hosts - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - User Logged in to Multiple Hosts
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = action, dest, user
action.notable.param.rule_description = Most users use only one or two machines during the normal course of business. User accounts that log in to multiple machines, especially over a short period of time, may be compromised. Remote logins among multiple machines may be an indicator of Lateral Movement. - MITRE ATT&CK Techniques: T1078
action.notable.param.rule_title = AttackDetection - User Logged in to Multiple Hosts - For fields: $action$ $ dest$ $ user$
action.notable.param.security_domain = access
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Most users use only one or two machines during the normal course of business. User accounts that log in to multiple machines, especially over a short period of time, may be compromised. Remote logins among multiple machines may be an indicator of Lateral Movement. - MITRE ATT&CK Techniques: T1078
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` min(_time) as firstTime, max(_time) as lastTime values(Authentication.dest) as hosts count from datamodel=Authentication where Authentication.action = success by Authentication.user \
| `drop_dm_object_name(Authentication)`\
| rename count AS "totalCount"\
| eval nHosts=mvcount(hosts) | where nHosts >  1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`\
| table user hosts nHosts firstTime lastTime totalCount

[AttackDetection - Suspicious Run Locations - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Suspicious Run Locations
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, user
action.notable.param.rule_description = In Windows, files should never execute out of certain directory locations. Any of these locations may exist for a variety of reasons, and executables may be present in the directory but should not execute.  - MITRE ATT&CK Techniques: T1036
action.notable.param.rule_title = AttackDetection - Suspicious Run Locations - For fields: $process$ $ user$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = In Windows, files should never execute out of certain directory locations. Any of these locations may exist for a variety of reasons, and executables may be present in the directory but should not execute.  - MITRE ATT&CK Techniques: T1036
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` max(_time) as lastTime min(_time) as firstTime count from datamodel=Endpoint.Processes by Processes.process Processes.user host\
| `drop_dm_object_name("Processes")`\
| eval is_suspicious=if(match(process,"(?i).*(\:\\recycler\\.*|\:\\systemvolumeinformation\\.*|\%windir\%\\tasks\\.*|\%systemroot\%\\debug\\.*).*"),1,0)\
| where is_suspicious=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`\
| table host process user firstTime lastTime count

[AttackDetection - Processes Spawning cmd.exe - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Processes Spawning cmd.exe
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec, parent_process_exec, user, dest
action.notable.param.rule_description = The Windows Command Prompt (cmd.exe) is a utility that provides a command line interface to Windows operating systems. There may be automated programs, logon scripts, or administrative tools that launch instances of the command prompt in order to run scripts or other built-in commands. Spawning the process cmd.exe from certain parents may be more indicative of malice. - MITRE ATT&CK Techniques: T1059
action.notable.param.rule_title = AttackDetection - Processes Spawning cmd.exe - For fields: $process_exec$ $ parent_process_exec$ $ user$ $ dest$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = The Windows Command Prompt (cmd.exe) is a utility that provides a command line interface to Windows operating systems. There may be automated programs, logon scripts, or administrative tools that launch instances of the command prompt in order to run scripts or other built-in commands. Spawning the process cmd.exe from certain parents may be more indicative of malice. - MITRE ATT&CK Techniques: T1059
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count, min(_time) as firstTime, max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE "Processes.process_exec"="cmd.exe" BY "Processes.parent_process_exec", "Processes.process_exec", "Processes.user", "Processes.dest" \
| rename "Processes.*" as "*" \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - RDP Connection Detection - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - RDP Connection Detection
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = signature_id, app, user, src, dest
action.notable.param.rule_description = The Remote Desktop Protocol (RDP), built in to Microsoft operating systems, allows a user to remotely log in to the desktop of another host. RDP can be detected in several ways. This rule detects it via the authentication events.\
 - MITRE ATT&CK Techniques: T1021
action.notable.param.rule_title = AttackDetection - RDP Connection Detection - For fields: $signature_id$ $ app$ $ user$ $ src$ $ dest$
action.notable.param.security_domain = access
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = The Remote Desktop Protocol (RDP), built in to Microsoft operating systems, allows a user to remotely log in to the desktop of another host. RDP can be detected in several ways. This rule detects it via the authentication events.\
 - MITRE ATT&CK Techniques: T1021
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats  `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Authentication where (Authentication.signature_id IN ("4624", "4634", "4647", "4778")) AND Authentication.app="win:remote" by Authentication.user Authentication.src Authentication.dest\
| `drop_dm_object_name(Authentication)`\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - RunDLL32.exe monitoring - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - RunDLL32.exe monitoring
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec, user, dest
action.notable.param.rule_description = Adversaries may find it necessary to use Dynamic-link Libraries (DLLs) to evade defenses. One way these DLLs can be “executed” is through the use of the built-in Windows utility RunDLL32, which allows a user to execute code in a DLL, providing the name and optional arguments to an exported entry point. - MITRE ATT&CK Techniques: T1218
action.notable.param.rule_title = AttackDetection - RunDLL32.exe monitoring - For fields: $process$ $ process_exec$ $ user$ $ dest$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may find it necessary to use Dynamic-link Libraries (DLLs) to evade defenses. One way these DLLs can be “executed” is through the use of the built-in Windows utility RunDLL32, which allows a user to execute code in a DLL, providing the name and optional arguments to an exported entry point. - MITRE ATT&CK Techniques: T1218
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` min(_time) as firstTime, max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE "Processes.process_exec"="rundll32.exe" BY "Processes.process", "Processes.process_exec", "Processes.user", "Processes.dest" \
| `drop_dm_object_name(Processes)`\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Successful Local Account Login - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Successful Local Account Login
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = signature_id, authentication_method, src, dest, user
action.notable.param.rule_description = Adversaries may pass the hash using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass The Hash for lateral movement is detected with the authentication events in this rule. - MITRE ATT&CK Techniques: T1550
action.notable.param.rule_title = AttackDetection - Successful Local Account Login - For fields: $signature_id$ $ authentication_method$ $ src$ $ dest$ $ user$
action.notable.param.security_domain = access
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may pass the hash using stolen password hashes to move laterally within an environment, bypassing normal system access controls. Pass The Hash for lateral movement is detected with the authentication events in this rule. - MITRE ATT&CK Techniques: T1550
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats  `security_content_summariesonly` count max(_time) as lastTime min(_time) as fistTime from datamodel=Authentication where Authentication.signature_id ="4624" Authentication.authentication_method="NTLM" Authentication.user!="ANONYMOUS LOGON" by Authentication.signature_id,  Authentication.authentication_method, Authentication.src, Authentication.dest, Authentication.user \
| `drop_dm_object_name(Authentication)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`\
| table  src dest user count fistTime lastTime

[AttackDetection - Scheduled Task FileAccess - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Scheduled Task FileAccess
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, file_path, process_path
action.notable.param.rule_description = In order to gain persistence, privilege escalation, or remote execution, an adversary may use the Windows Task Scheduler to schedule a command to be run at a specified time, date, and even host. \
Note: Need to add file_path field to Endpoint.Proccesses Dataset and make sure action field for EventCode=11 is properly extracted as "created".\
 - MITRE ATT&CK Techniques: T1053
action.notable.param.rule_title = AttackDetection - Scheduled Task FileAccess - For fields: $user$ $ dest$ $ file_path$ $ process_path$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = In order to gain persistence, privilege escalation, or remote execution, an adversary may use the Windows Task Scheduler to schedule a command to be run at a specified time, date, and even host. \
Note: Need to add file_path field to Endpoint.Proccesses Dataset and make sure action field for EventCode=11 is properly extracted as "created".\
 - MITRE ATT&CK Techniques: T1053
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes WHERE Processes.action="created" AND Processes.process_path!="C:\\WINDOWS\\system32\\svchost.exe" AND (Processes.file_path="C:\\Windows\\System32\\Tasks\\*" OR Processes.file_path="C:\\Windows\\Tasks\\*" ) BY Processes.user, Processes.dest, Processes.action, Processes.process_path, Processes.file_path, Processes.process_id \
| `drop_dm_object_name(Processes)`\
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Compiled HTML Access - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Compiled HTML Access
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process_exec, parent_process_exec, process, parent_process
action.notable.param.rule_description = Adversaries may hide malicious code in .chm compiled HTML files. When these files are read, Windows uses the HTML help executable named hh.exe, which is the signature for this analytic. - MITRE ATT&CK Techniques: T1218
action.notable.param.rule_title = AttackDetection - Compiled HTML Access - For fields: $user$ $ dest$ $ process_exec$ $ parent_process_exec$ $ process$ $ parent_process $
action.notable.param.security_domain = endpoint
action.notable.param.severity = high
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may hide malicious code in .chm compiled HTML files. When these files are read, Windows uses the HTML help executable named hh.exe, which is the signature for this analytic. - MITRE ATT&CK Techniques: T1218
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="hh.exe" by Processes.user Processes.dest Processes.process_exec Processes.parent_process_exec Processes.process Processes.parent_process \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`\
| table count user dest process_exec parent_process_exec process parent_process firstTime lastTime

[AttackDetection - Network Share Connection Removal - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Network Share Connection Removal
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process_exec, parent_process_exec, process, parent_process
action.notable.param.rule_description = Adversaries may use network shares to exfliltrate date; they will then remove the shares to cover their tracks. This analytic looks for the removal of network shares via commandline, which is otherwise a rare event.\
\
 - MITRE ATT&CK Techniques: T1070
action.notable.param.rule_title = AttackDetection - Network Share Connection Removal - For fields: $user$ $ dest$ $ process_exec$ $ parent_process_exec$ $ process$ $ parent_process $
action.notable.param.security_domain = endpoint
action.notable.param.severity = high
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may use network shares to exfliltrate date; they will then remove the shares to cover their tracks. This analytic looks for the removal of network shares via commandline, which is otherwise a rare event.\
\
 - MITRE ATT&CK Techniques: T1070
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE ((Processes.process_exec="net.exe" AND Processes.process=*delete*) OR Processes.process="*Remove-SmbShare*" OR Processes.process="*Remove-FileShare*")\
    BY Processes.user Processes.dest Processes.process_exec Processes.parent_process_exec Processes.process Processes.parent_process \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Local Network Sniffing - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Local Network Sniffing
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process_exec, parent_process_exec, process, parent_process, parent_process_path
action.notable.param.rule_description = Adversaries may use a variety of tools to gain visibility on the current status of things on the network: which processes are listening on which ports, which services are running on other hosts, etc.  - MITRE ATT&CK Techniques: T1040
action.notable.param.rule_title = AttackDetection - Local Network Sniffing - For fields: $user$ $ dest$ $ process_exec$ $ parent_process_exec$ $ process$ $ parent_process$ $ parent_process_path $
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may use a variety of tools to gain visibility on the current status of things on the network: which processes are listening on which ports, which services are running on other hosts, etc.  - MITRE ATT&CK Techniques: T1040
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE (Processes.process_exec="tshark.exe" OR Processes.process_exec="windump.exe" OR (Processes.process_exec="logman.exe" AND Processes.parent_process_exec!="?" AND Processes.parent_process_path!="C:\\Program Files\\Windows Event Reporting\\Core\\EventReporting.AgentService.exe") OR Processes.process_exec="tcpdump.exe" OR Processes.process_exec="wprui.exe" OR Processes.process_exec="wpr.exe" OR Processes.process_exec="pktmon.exe") \
    BY Processes.user Processes.dest Processes.process_exec Processes.parent_process_exec Processes.process Processes.parent_process Processes.parent_process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - DLL Injection with Mavinject - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - DLL Injection with Mavinject
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process, process_exec, parent_process_exec, process_path, parent_process_path
action.notable.param.rule_description = The ways of injecting a malicious DLL into a process are numerous, mavinject.exe is a commonly used tool for doing so because it roles up many of the necessary steps into one, and is available within Windows.  - MITRE ATT&CK Techniques: T1055
action.notable.param.rule_title = AttackDetection - DLL Injection with Mavinject - For fields: $user$ $ dest$ $ process$ $ process_exec$ $ parent_process_exec$ $ process_path$ $ parent_process_path$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = The ways of injecting a malicious DLL into a process are numerous, mavinject.exe is a commonly used tool for doing so because it roles up many of the necessary steps into one, and is available within Windows.  - MITRE ATT&CK Techniques: T1055
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE (Processes.process_exec="mavinject.exe" OR Processes.process_exec="mavinject32.exe" OR Processes.process="*INJECTRUNNING*")\
    BY Processes.user Processes.dest Processes.process Processes.process_exec Processes.parent_process_exec Processes.process_path Processes.parent_process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - MSBuild and msxsl - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - MSBuild and msxsl
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process, process_exec, parent_process_exec, process_path, parent_process_path
action.notable.param.rule_description = Trusted developer utilities such as MSBuild may be leveraged to run malicious code with elevated privileges. This analytic looks for any instances of msbuild.exe and msxsl.exe. - MITRE ATT&CK Techniques:  T1127
action.notable.param.rule_title = AttackDetection - MSBuild and msxsl - For fields: $user$ $ dest$ $ process$ $ process_exec$ $ parent_process_exec$ $ process_path$ $ parent_process_path$
action.notable.param.security_domain = endpoint
action.notable.param.severity = high
alert.suppress = 0
cron_schedule = */5 * * * *
description = Trusted developer utilities such as MSBuild may be leveraged to run malicious code with elevated privileges. This analytic looks for any instances of msbuild.exe and msxsl.exe. - MITRE ATT&CK Techniques:  T1127
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime FROM datamodel=Endpoint.Processes \
    WHERE (Processes.process_path="C:\\Program Files (x86)\\Microsoft Visual Studio\\*\\bin\\MSBuild.exe" OR Processes.process_path="C:\\Windows\\Microsoft.NET\\Framework*\\msbuild.exe" OR Processes.process_path="C:\\users\\*\\appdata\\roaming\\microsoft\\msxsl.exe") AND Processes.parent_process_path="*\\Microsoft Visual Studio*"\
    BY Processes.user Processes.dest Processes.process Processes.process_path Processes.parent_process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Component Object Model Hijacking - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Component Object Model Hijacking
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, action, registry_path, dest
action.notable.param.rule_description = Adversaries may establish persistence or escalate privileges by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. This is typically done by replacing COM object registry entries under the HKEY_CURRENT_USER\Software\Classes\CLSID or HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID keys. - MITRE ATT&CK Techniques: T1546
action.notable.param.rule_title = AttackDetection - Component Object Model Hijacking - For fields: $user$ $ action$ $ registry_path$ $ dest$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may establish persistence or escalate privileges by executing malicious content triggered by hijacked references to Component Object Model (COM) objects. This is typically done by replacing COM object registry entries under the HKEY_CURRENT_USER\Software\Classes\CLSID or HKEY_LOCAL_MACHINE\SOFTWARE\Classes\CLSID keys. - MITRE ATT&CK Techniques: T1546
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = |tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path="*\\software\\classes\\clsid*" by Registry.user, Registry.registry_path, Registry.action, Registry.dest\
|`drop_dm_object_name('Registry')`\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - CMSTP - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - CMSTP
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, src_ip, dest_ip, process_path
action.notable.param.rule_description = CMSTP.exe is the Microsoft Connection Manager Profile Installer, which can be leveraged to setup listeners that will receive and install malware from remote sources in trusted fashion. When CMSTP.exe is seen in combination with an external connection, it is a good indication of this TTP. - MITRE ATT&CK Techniques: T1218
action.notable.param.rule_title = AttackDetection - CMSTP - For fields: $user$ $ src_ip$ $ dest_ip$ $ process_path $
action.notable.param.security_domain = endpoint
action.notable.param.severity = high
alert.suppress = 0
cron_schedule = */5 * * * *
description = CMSTP.exe is the Microsoft Connection Manager Profile Installer, which can be leveraged to setup listeners that will receive and install malware from remote sources in trusted fashion. When CMSTP.exe is seen in combination with an external connection, it is a good indication of this TTP. - MITRE ATT&CK Techniques: T1218
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = eventtype="ms-sysmon-network" process_path="C:\\Windows\\System32\\CMSTP.exe"  | where (NOT cidrmatch("10.0.0.0/8", src_ip) AND NOT cidrmatch("192.168.0.0/16", src_ip) AND NOT cidrmatch("172.16.0.0/12", src_ip)) | stats earliest(_time) as firstTime latest(_time) as lastTime count by user, src_ip, dest_ip, process_path \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection -  Registry Edit from Screensaver - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection -  Registry Edit from Screensaver
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, registry_path
action.notable.param.rule_description = Adversaries may use screensaver files to run malicious code. This analytic triggers on suspicious edits to the screensaver registry keys, which dictate which .scr file the screensaver runs. - MITRE ATT&CK Techniques: T1546
action.notable.param.rule_title = AttackDetection -  Registry Edit from Screensaver - For fields: $user$ $ dest$ $ registry_path$
action.notable.param.security_domain = endpoint
action.notable.param.severity = high
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may use screensaver files to run malicious code. This analytic triggers on suspicious edits to the screensaver registry keys, which dictate which .scr file the screensaver runs. - MITRE ATT&CK Techniques: T1546
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats summariesonly=true allow_old_summaries=true count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path="*\\Software\\Policies\\Microsoft\\Windows\\Control Panel\\Desktop\\SCRNSAVE.EXE" by Registry.user Registry.dest Registry.registry_path \
| `drop_dm_object_name(Registry)` \
| convert timeformat="%m-%d-%Y %H:%M:%S" ctime(firstTime)\
| convert timeformat="%m-%d-%Y %H:%M:%S" ctime(lastTime) \
| table count user dest registry_path firstTime lastTime

[AttackDetection - Credentials in Files & Registry - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Credentials in Files & Registry
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process, process_path
action.notable.param.rule_description = Adversaries may search the Windows Registry on compromised systems for insecurely stored credentials for credential access. This can be accomplished using the query functionality of the reg.exe system utility, by looking for keys and values that contain strings such as “password”. - MITRE ATT&CK Techniques: T1552
action.notable.param.rule_title = AttackDetection - Credentials in Files & Registry - For fields: $user$ $ dest$ $ process$ $ process_path$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may search the Windows Registry on compromised systems for insecurely stored credentials for credential access. This can be accomplished using the query functionality of the reg.exe system utility, by looking for keys and values that contain strings such as “password”. - MITRE ATT&CK Techniques: T1552
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes  where Processes.process = "*reg* query *HKLM /f password /t REG_SZ /s*" OR Processes.process = "reg* query *HKCU /f password /t REG_SZ /s*" OR Processes.process = "*Get-UnattendedInstallFile*" OR Processes.process = "*Get-Webconfig*" OR Processes.process = "*Get-ApplicationHost*" OR Processes.process = "*Get-SiteListPassword*" OR Processes.process = "*Get-CachedGPPPassword*" OR Processes.process = "*Get-RegistryAutoLogon*" by Processes.user Processes.dest, Processes.process, Processes.process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - AppInit DLLs - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - AppInit DLLs
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, action, registry_path
action.notable.param.rule_description = Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes.  - MITRE ATT&CK Techniques: T1546
action.notable.param.rule_title = AttackDetection - AppInit DLLs - For fields: $user$ $ dest$ $ action$ $ registry_path$
action.notable.param.security_domain = ednpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may establish persistence and/or elevate privileges by executing malicious content triggered by AppInit DLLs loaded into processes. Dynamic-link libraries (DLLs) that are specified in the AppInit_DLLs value in the Registry keys can be abused to obtain elevated privileges by causing a malicious DLL to be loaded and run in the context of separate processes.  - MITRE ATT&CK Techniques: T1546
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Registry where Registry.registry_path="*\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Appinit_Dlls\\*"\
 OR Registry.registry_path="*\\SOFTWARE\\Wow6432Node\\Microsoft\\Windows NT\\CurrentVersion\\Windows\\Appinit_Dlls\\*" by Registry.user, Registry.dest, Registry.action, Registry.registry_path\
| `drop_dm_object_name(Registry)`\
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Clear Powershell Console Command History - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Clear Powershell Console Command History
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process
action.notable.param.rule_description = Adversaries may attempt to conceal their tracks by deleting the history of commands run within the Powershell console, or turning off history saving to begin with. This analytic looks for several commands that would do this. - MITRE ATT&CK Techniques: T1070
action.notable.param.rule_title = AttackDetection - Clear Powershell Console Command History - For fields: $user$ $ dest$ $ process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may attempt to conceal their tracks by deleting the history of commands run within the Powershell console, or turning off history saving to begin with. This analytic looks for several commands that would do this. - MITRE ATT&CK Techniques: T1070
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process="*rm (Get-PSReadlineOption).HistorySavePath*" OR Processes.process="*del (Get-PSReadlineOption).HistorySavePath*" OR  Processes.process="*Set-PSReadlineOption –HistorySaveStyle SaveNothing*" OR Processes.process="*Remove-Item (Get-PSReadlineOption).HistorySavePath*" OR Processes.process="del*Microsoft\\Windows\\Powershell\\PSReadline\\ConsoleHost_history.txt" by Processes.user, Processes.dest, Processes.process\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Indicator Blocking - Driver Unloaded - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Indicator Blocking - Driver Unloaded
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process_exec, process
action.notable.param.rule_description = Adversaries may attempt to evade system defenses by unloading minifilter drivers used by host-based sensors such as Sysmon through the use of the fltmc command-line utility.  - MITRE ATT&CK Techniques: T1562
action.notable.param.rule_title = AttackDetection - Indicator Blocking - Driver Unloaded - For fields: $user$ $ dest$ $ process_exec$ $ process$
action.notable.param.security_domain = ednpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may attempt to evade system defenses by unloading minifilter drivers used by host-based sensors such as Sysmon through the use of the fltmc command-line utility.  - MITRE ATT&CK Techniques: T1562
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where Processes.process_exec="fltmc.exe" Processes.process="*unload*" by Processes.user, Processes.dest, Processes.process_exec, Processes.process\
| `drop_dm_object_name('Processes')`\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Processes Started From Irregular Parent - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Processes Started From Irregular Parent
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process_exec, parent_process_exec
action.notable.param.rule_description = Adversaries may start legitimate processes and then use their memory space to run malicious code. This analytic looks for common Windows processes that have been abused this way in the past; when the processes are started for this purpose they may not have the standard parent that we would expect. - MITRE ATT&CK Techniques: T1068
action.notable.param.rule_title = AttackDetection - Processes Started From Irregular Parent - For fields: $user$ $ dest$ $ process_exec$ $ parent_process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may start legitimate processes and then use their memory space to run malicious code. This analytic looks for common Windows processes that have been abused this way in the past; when the processes are started for this purpose they may not have the standard parent that we would expect. - MITRE ATT&CK Techniques: T1068
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes \
where Processes.parent_process_exec!="?" AND Processes.parent_process_exec!="splunk-regmon.exe"\
AND Processes.parent_process_exec!="splunk-powershell.exe" AND\
((Processes.process_exec="smss.exe" AND (Processes.parent_process_exec!="smss.exe" AND Processes.parent_process_exec!="System")) OR\
(Processes.process_exec="csrss.exe" AND (Processes.parent_process_exec!="smss.exe" AND Processes.parent_process_exec!="svchost.exe")) OR\
(Processes.process_exec="wininit.exe" AND Processes.parent_process_exec!="smss.exe") OR\
(Processes.process_exec="winlogon.exe" AND Processes.parent_process_exec!="smss.exe") OR\
(Processes.process_exec="lsass.exe" and Processes.parent_process_exec!="wininit.exe") OR\
(Processes.process_exec="LogonUI.exe" AND (Processes.parent_process_exec!="winlogon.exe" AND Processes.parent_process_exec!="wininit.exe")) OR\
(Processes.process_exec="services.exe" AND Processes.parent_process_exec!="wininit.exe") OR\
(Processes.process_exec="spoolsv.exe" AND Processes.parent_process_exec!="services.exe") OR\
(Processes.process_exec="taskhost.exe" AND (Processes.parent_process_exec!="services.exe" AND Processes.parent_process_exec!="svchost.exe")) OR\
(Processes.process_exec="taskhostw.exe" AND (Processes.parent_process_exec!="services.exe" AND Processes.parent_process_exec!="svchost.exe")) OR\
(Processes.process_exec="userinit.exe" AND (Processes.parent_process_exec!="dwm.exe" AND Processes.parent_process_exec!="winlogon.exe"))) BY Processes.user Processes.dest Processes.process_exec Processes.parent_process_exec\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Local Permission Group Discovery - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Local Permission Group Discovery
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = user, dest, process, process_exec
action.notable.param.rule_description = Cyber actors frequently enumerate local or domain permissions groups. The net utility is usually used for this purpose. This analytic looks for any instances of net.exe, which is not normally used for benign purposes, although system administrator actions may trigger false positives.\
 - MITRE ATT&CK Techniques: T1069
action.notable.param.rule_title = AttackDetection - Local Permission Group Discovery - For fields: $user$ $ dest$ $ process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Cyber actors frequently enumerate local or domain permissions groups. The net utility is usually used for this purpose. This analytic looks for any instances of net.exe, which is not normally used for benign purposes, although system administrator actions may trigger false positives.\
 - MITRE ATT&CK Techniques: T1069
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes \
where Processes.process_exec = "net.exe" AND (Processes.process = "* user*" OR Processes.process = "* group*" OR Processes.process = "* localgroup*" OR Processes.process = "*get-localgroup*" OR Processes.process = "*get-ADPrincipalGroupMembership*") by Processes.user Processes.dest, Processes.process_exec, Processes.process_path\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Unusual Child Process for Spoolsv.Exe or Connhost.Exe - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Unusual Child Process for Spoolsv.Exe or Connhost.Exe
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec, parent_process_exec
action.notable.param.rule_description = A common way of escalating privileges in a system is by externally invoking and exploiting spoolsv or connhost executables, both of which are legitimate Windows applications. This query searches for an invocation of either of these executables by a user, thus alerting us of any potentially malicious activity. - MITRE ATT&CK Techniques: T1068
action.notable.param.rule_title = AttackDetection - Unusual Child Process for Spoolsv.Exe or Connhost.Exe - For fields: $process_exec$ $ parent_process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = A common way of escalating privileges in a system is by externally invoking and exploiting spoolsv or connhost executables, both of which are legitimate Windows applications. This query searches for an invocation of either of these executables by a user, thus alerting us of any potentially malicious activity. - MITRE ATT&CK Techniques: T1068
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where\
(Processes.process_exec = "spoolsv.exe*"\
        OR Processes.process_exec = "conhost.exe") AND Processes.parent_process_exec = "cmd.exe" by Processes.user, Processes.dest, Processes.process_exec, Processes.parent_process_exec\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Unusual Child Process spawned using DDE exploit - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Unusual Child Process spawned using DDE exploit
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec, parent_process_exec
action.notable.param.rule_description = Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. This analytic looks for unusually spawned child process.  - MITRE ATT&CK Techniques: T1559
action.notable.param.rule_title = AttackDetection - Unusual Child Process spawned using DDE exploit - For fields: $process_exec$ $ parent_process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = Adversaries may use Windows Dynamic Data Exchange (DDE) to execute arbitrary commands. This analytic looks for unusually spawned child process.  - MITRE ATT&CK Techniques: T1559
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where\
(Processes.parent_process_exec = "*excel.exe"\
        OR Processes.parent_process_exec = "*word.exe"\
        OR Processes.parent_process_exec = "*outlook.exe") AND Processes.process_exec = "*.exe" by Processes.user, Processes.dest, Processes.process_exec, Processes.parent_process_exec\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Webshell-Indicative Process Tree - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Webshell-Indicative Process Tree
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec, parent_process_exec
action.notable.param.rule_description = A web shell is a web script placed on an openly accessible web server to allow an adversary to use the server as a gatway in a network. This analytic looks for host enumeration executables initiated by any web service that would not normally be executed within that environment. - MITRE ATT&CK Techniques: T1505
action.notable.param.rule_title = AttackDetection - Webshell-Indicative Process Tree - For fields: $process_exec$ $ parent_process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = A web shell is a web script placed on an openly accessible web server to allow an adversary to use the server as a gatway in a network. This analytic looks for host enumeration executables initiated by any web service that would not normally be executed within that environment. - MITRE ATT&CK Techniques: T1505
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where\
(Processes.parent_process_exec = "*w3wp.exe" \
        OR Processes.parent_process_exec = "*httpd.exe"\
        OR Processes.parent_process_exec = "*tomcat*.exe" \
        OR Processes.parent_process_exec = "*nginx.exe") AND\
(Processes.process_exec = "cmd.exe"\
        OR Processes.process_exec = "cmd.exe"\
        OR Processes.process_exec = "powershell.exe" \
        OR Processes.process_exec = "net.exe" \
        OR Processes.process_exec = "hostname.exe" \
        OR Processes.process_exec = "whoami.exe" \
        OR Processes.process_exec = "*systeminfo.exe" \
        OR Processes.process_exec = "ipconfig.exe") by Processes.user, Processes.dest, Processes.parent_process_exec, Processes.process_exec\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Detecting Tampering of Windows Defender Command Prompt - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Detecting Tampering of Windows Defender Command Prompt
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = In an attempt to avoid detection after compromising a machine, threat actors often try to disable Windows Defender. This is often done using “sc” [service control], a legitimate tool provided by Microsoft for managing services. - MITRE ATT&CK Techniques: T1562
action.notable.param.rule_title = AttackDetection - Detecting Tampering of Windows Defender Command Prompt - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = In an attempt to avoid detection after compromising a machine, threat actors often try to disable Windows Defender. This is often done using “sc” [service control], a legitimate tool provided by Microsoft for managing services. - MITRE ATT&CK Techniques: T1562
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="sc.exe" AND (Processes.process="*stop*" OR  Processes.process="*config*" OR  Processes.process="*query*") by Processes.process Processes.process_exec host\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Identifying Port Scanning Activity - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Identifying Port Scanning Activity
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = src_ip, dest_ip, dest_port
action.notable.param.rule_description = After compromising an initial machine, adversaries commonly attempt to laterally move across the network. The first step to attempt the lateral movement often involves conducting host identification, port and service scans on the internal network via the compromised machine using tools such as Nmap, Cobalt Strike, etc. - MITRE ATT&CK Techniques: T1046
action.notable.param.rule_title = AttackDetection - Identifying Port Scanning Activity - For fields: $src_ip$ $ dest_ip$ $ dest_port$
action.notable.param.security_domain = network
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = After compromising an initial machine, adversaries commonly attempt to laterally move across the network. The first step to attempt the lateral movement often involves conducting host identification, port and service scans on the internal network via the compromised machine using tools such as Nmap, Cobalt Strike, etc. - MITRE ATT&CK Techniques: T1046
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` dc(All_Traffic.dest_port) as portCount min(_time) as firstTime max(_time) as lastTime from datamodel=Network_Traffic.All_Traffic where (All_Traffic.dest_ip="10.0.0.0/8" OR All_Traffic.dest_ip="192.168.0.0/16" OR All_Traffic.dest_ip="172.16.0.0/12")  by All_Traffic.src_ip  All_Traffic.dest_ip\
| `drop_dm_object_name(All_Traffic)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`\
| where portCount > 5

[AttackDetection - Disable UAC - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Disable UAC
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, parent_process_exec
action.notable.param.rule_description = Threat actors often, after compromising a machine, try to disable User Access Control (UAC) to escalate privileges. This is often done by changing the registry key for system policies using “reg.exe”, a legitimate tool provided by Microsoft for modifying the registry via command prompt or scripts. - MITRE ATT&CK Techniques: T1548
action.notable.param.rule_title = AttackDetection - Disable UAC - For fields: $process$ $ parent_process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Threat actors often, after compromising a machine, try to disable User Access Control (UAC) to escalate privileges. This is often done by changing the registry key for system policies using “reg.exe”, a legitimate tool provided by Microsoft for modifying the registry via command prompt or scripts. - MITRE ATT&CK Techniques: T1548
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.parent_process_exec="cmd.exe" AND Processes.process="*reg*HKLM*REG_DWORD* /d 0*"  by Processes.user, host, Processes.process, Processes.parent_process_exec\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Detecting Shadow Copy Deletion via Vssadmin.exe - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Detecting Shadow Copy Deletion via Vssadmin.exe
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = After compromising a network of systems, threat actors often try to delete Shadow Copy in an attempt to prevent administrators from restoring the systems to versions present before the attack. This is often done via vssadmin, a legitimate Windows tool to interact with shadow copies. - MITRE ATT&CK Techniques: T1490
action.notable.param.rule_title = AttackDetection - Detecting Shadow Copy Deletion via Vssadmin.exe - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = After compromising a network of systems, threat actors often try to delete Shadow Copy in an attempt to prevent administrators from restoring the systems to versions present before the attack. This is often done via vssadmin, a legitimate Windows tool to interact with shadow copies. - MITRE ATT&CK Techniques: T1490
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="vssadmin.exe" AND Processes.process="*delete*"  by Processes.user, host, Processes.process, Processes.process_exec\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Get System Elevation (Meterpreter and Cobalt Strike) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Get System Elevation (Meterpreter and Cobalt Strike)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec, parent_process_exec
action.notable.param.rule_description = Cyber actors frequently escalate to the SYSTEM account after gaining entry to a Windows host, to enable them to carry out various attacks more effectively. This analytic looks for techniques to try and attain the system.  - MITRE ATT&CK Techniques: T1548
action.notable.param.rule_title = AttackDetection - Get System Elevation (Meterpreter and Cobalt Strike) - For fields: $process$ $ process_exec$ $ parent_process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Cyber actors frequently escalate to the SYSTEM account after gaining entry to a Windows host, to enable them to carry out various attacks more effectively. This analytic looks for techniques to try and attain the system.  - MITRE ATT&CK Techniques: T1548
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where\
(Processes.parent_process_exec = "services.exe" AND Processes.process_exec = "cmd.exe" \
        AND (Processes.process = "*echo*"  AND Processes.process = "*\\pipe\\*"))\
        OR (Processes.process_exec = "rundll32.exe" AND Processes.process = "*,a /p:*") by Processes.user, Processes.dest, Processes.parent_process_path, Processes.process_path, Processes.process\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Get System Elevation (Empire and PoshC2) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Get System Elevation (Empire and PoshC2)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = Cyber actors frequently escalate to the SYSTEM account after gaining entry to a Windows host, to enable them to carry out various attacks more effectively. This analytic looks for techniques to try and attain the system.  - MITRE ATT&CK Techniques: T1548
action.notable.param.rule_title = AttackDetection - Get System Elevation (Empire and PoshC2) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = Cyber actors frequently escalate to the SYSTEM account after gaining entry to a Windows host, to enable them to carry out various attacks more effectively. This analytic looks for techniques to try and attain the system.  - MITRE ATT&CK Techniques: T1548
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where\
(Processes.process_exec = "cmd.exe" OR Processes.process = "*%COMSPEC%*")\
        AND (Processes.process = "*echo*"  AND Processes.process = "*\\pipe\\*")\
        by Processes.user, Processes.dest, Processes.parent_process_path, Processes.process_path, Processes.process\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - Debuggers for Accessibility Applications - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Debuggers for Accessibility Applications
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process
action.notable.param.rule_description = The Windows Registry location HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options allows for parameters to be set for applications during execution. One feature used by malicious actors is the “Debugger” option. Windows will launch the Debugging command line, and pass the original command line in as an argument. Adversaries can set a Debugger for Accessibility Applications. - MITRE ATT&CK Techniques: T1546
action.notable.param.rule_title = AttackDetection - Debuggers for Accessibility Applications - For fields: $process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = medium
alert.suppress = 0
cron_schedule = */5 * * * *
description = The Windows Registry location HKLM\Software\Microsoft\Windows NT\CurrentVersion\Image File Execution Options allows for parameters to be set for applications during execution. One feature used by malicious actors is the “Debugger” option. Windows will launch the Debugging command line, and pass the original command line in as an argument. Adversaries can set a Debugger for Accessibility Applications. - MITRE ATT&CK Techniques: T1546
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process IN ("*$* *sethc.exe", "*$* *utilman.exe", "*$* *osk.exe", "*$* *narrator.exe", "*$* *magnify.exe")\
        by  Processes.process, host\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)`\
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (powershell) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (powershell)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as powershell. - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (powershell) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as powershell. - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="powershell.exe" by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*Invoke-CimMethod\s+-ClassName\s+Win32_Process\s+-MethodName\s+Create.*\b(\w+(\.\w+)?):(\w+(\.\w+)?).*|.*-ep bypass\s+-\s+<.*\b(\w+(\.\w+)?):(\w+(\.\w+)?).*|.*-command.*Get-Content.*-Stream.*Set-Content.*start-process.*(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (wmic) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (wmic)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as wmic. - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (wmic) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as wmic. - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="wmic.exe" by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*process call create.*\"(\w+(\.\w+)?):(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (rundll32) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (rundll32)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as rundll32.  - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (rundll32) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as rundll32.  - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="rundll32.exe" by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*\"?(\w+(\.\w+)?):(\w+(\.\w+)?)?\"?,\w+\|(advpack\.dll\|ieadvpack\.dll),RegisterOCX\s+(\w+\.\w+):(\w+(\.\w+)?)\|(shdocvw\.dll\|ieframe\.dll),OpenURL.*(\w+\.\w+):(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (wscript/cscript) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (wscript/cscript)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as wscript and cscript. - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (wscript/cscript) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because they can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using system utilities such as wscript and cscript. - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="wscript.exe" OR  Processes.process_exec="cscript.exe" by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*(?<!\/)\b\w+(\.\w+)?:\w+(\.\w+)?$"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (control) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (control)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (control) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="control.exe" by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*(\w+(\.\w+)?):(\w+\.dll).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (appvlp) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (appvlp)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (appvlp) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="appvlp.exe"  by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*(\w+(\.\w+)?):(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (cmd) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (cmd)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (cmd) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="cmd.exe"  by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*-\s+\<.*\b(\w+(\.\w+)?):(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (ftp) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (ftp)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (ftp) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="ftp.exe"  by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*-s:(\w+(\.\w+)?):(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (bash) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (bash)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (bash) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="bash.exe"  by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*-c.*(\w+(\.\w+)?):(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (mavinject) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (mavinject)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (mavinject) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="mavinject.exe" by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*\d+\s+\/INJECTRUNNING.*\b(\w+(\.\w+)?):(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - NTFS Alternate Data Stream Execution (bitsadmin) - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - NTFS Alternate Data Stream Execution (bitsadmin)
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process, process_exec
action.notable.param.rule_description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
action.notable.param.rule_title = AttackDetection - NTFS Alternate Data Stream Execution (bitsadmin) - For fields: $process$ $ process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = NTFS Alternate Data Streams (ADSs) may be used by adversaries as a means of evading security tools by storing malicious data or binaries in file attribute metadata. ADSs are also powerful because their contents can be directly executed by various Windows tools; accordingly, this analytic looks at common ways of executing ADSs using Living off the Land Binaries and Scripts (LOLBAS). - MITRE ATT&CK Techniques: T1564
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes where Processes.process_exec="bitsadmin.exe"  by Processes.process_exec, host, Processes.process\
| `drop_dm_object_name(Processes)` \
| eval is_ads=if(match(process, ".*\/create.*\/addfile.*\/SetNotifyCmdLine.*\b(\w+\.\w+):(\w+(\.\w+)?).*"),1,0) \
| where is_ads=1\
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`

[AttackDetection - Rare LolBAS Command Lines - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Rare LolBAS Command Lines
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process_exec
action.notable.param.rule_description = LoLBAS are binaries and scripts that are built in to Windows, frequently are signed by Microsoft, and may be used by an attacker. Some LoLBAS are used very rarely and it might be possible to alert every time they’re used (this would depend on your environment), but many others are very common and can’t be simply alerted on. - MITRE ATT&CK Techniques: T1012, T1112, T1547, T1574
action.notable.param.rule_title = AttackDetection - Rare LolBAS Command Lines - For fields: $process_exec$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = LoLBAS are binaries and scripts that are built in to Windows, frequently are signed by Microsoft, and may be used by an attacker. Some LoLBAS are used very rarely and it might be possible to alert every time they’re used (this would depend on your environment), but many others are very common and can’t be simply alerted on. - MITRE ATT&CK Techniques: T1012, T1112, T1547, T1574
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime  from datamodel=Endpoint.Processes where Processes.process_exec IN ("At.exe", "Atbroker.exe", "Bash.exe", "Bitsadmin.exe", "Certutil.exe", "Cmd.exe", "Cmdkey.exe", "Cmstp.exe", "Control.exe", "Csc.exe", "Cscript.exe", "Dfsvc.exe", "Diskshadow.exe", "Dnscmd.exe", "Esentutl.exe", "Eventvwr.exe", "Expand.exe", "Extexport.exe", "Extrac32.exe", "Findstr.exe", "Forfiles.exe", "Ftp.exe", "Gpscript.exe", "Hh.exe", "Ie4uinit.exe", "Ieexec.exe", "Infdefaultinstall.exe", "Installutil.exe", "Jsc.exe", "Makecab.exe", "Mavinject.exe", "Microsoft.Workflow.r.exe", "Mmc.exe", "Msbuild.exe", "Msconfig.exe", "Msdt.exe", "Mshta.exe", "Msiexec.exe", "Odbcconf.exe", "Pcalua.exe", "Pcwrun.exe", "Presentationhost.exe", "Print.exe", "Reg.exe", "Regasm.exe", "Regedit.exe", "Register-cimprovider.exe", "Regsvcs.exe", "Regsvr32.exe", "Replace.exe", "Rpcping.exe", "Rundll32.exe", "Runonce.exe", "Runscripthelper.exe", "Sc.exe", "Schtasks.exe", "Scriptrunner.exe", "SyncAppvPublishingServer.exe", "Tttracer.exe", "Verclsid.exe", "Wab.exe", "Wmic.exe", "Wscript.exe", "Wsreset.exe", "Xwizard.exe", "Advpack.dll", "Comsvcs.dll", "Ieadvpack.dll", "Ieaframe.dll", "Mshtml.dll", "Pcwutl.dll", "Setupapi.dll", "Shdocvw.dll", "Shell32.dll", "Syssetup.dll", "Url.dll", "Zipfldr.dll", "Appvlp.exe", "Bginfo.exe", "Cdb.exe", "csi.exe", "Devtoolslauncher.exe", "dnx.exe", "Dxcap.exe", "Excel.exe", "Mftrace.exe", "Msdeploy.exe", "msxsl.exe", "Powerpnt.exe", "rcsi.exe", "Sqler.exe", "Sqlps.exe", "SQLToolsPS.exe", "Squirrel.exe", "te.exe", "Tracker.exe", "Update.exe", "vsjitdebugger.exe", "Winword.exe", "Wsl.exe", "CL_Mutexverifiers.ps1", "CL_Invocation.ps1", "Manage-bde.wsf", "Pubprn.vbs", "Slmgr.vbs", "Syncappvpublishingserver.vbs", "winrm.vbs", "Pester.bat") by host, Processes.process_exec, Processes.process, Processes.parent_process, Processes.parent_process_exec\
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`\
| eval process=lower(process) \
| eventstats count(process) as process_count by process \
| eventstats avg(process_count) as process_avg stdev(process_count) as process_stdev \
| eval lowerBound=(process_avg-process_stdev*1.5) \
| eval isOutlier=if((process_count < lowerBound),1,0) \
| where isOutlier=1

[AttackDetection - Unusually Long Command Line Strings - Rule]
action.alert_manager.param.title = $name$
action.correlationsearch.enabled = 1
action.correlationsearch.label = AttackDetection - Unusually Long Command Line Strings
action.customsearchbuilder.spec = {}
action.notable.param.nes_fields = process
action.notable.param.rule_description = Often, after a threat actor gains access to a system, they will attempt to run some kind of malware to further infect the victim machine. These malware often have long command line strings, which could be a possible indicator of attack. - MITRE ATT&CK Techniques: T1059
action.notable.param.rule_title = AttackDetection - Unusually Long Command Line Strings - For fields: $process$
action.notable.param.security_domain = endpoint
action.notable.param.severity = low
alert.suppress = 0
cron_schedule = */5 * * * *
description = Often, after a threat actor gains access to a system, they will attempt to run some kind of malware to further infect the victim machine. These malware often have long command line strings, which could be a possible indicator of attack. - MITRE ATT&CK Techniques: T1059
disabled = 1
dispatch.earliest_time = -24h
dispatch.latest_time = now
search = | tstats  `security_content_summariesonly` count  min(_time) as firstTime max(_time) as lastTime from datamodel=Endpoint.Processes by Processes.process, host \
| `drop_dm_object_name(Processes)` \
| `security_content_ctime(firstTime)` \
| `security_content_ctime(lastTime)`\
| eval cmd_length=len(process) \
| eventstats avg(cmd_length) as average_cmd_length by host \
| stats max(cmd_length) as max_cmd_length by host, average_cmd_length, firstTime, lastTime, process\
| where max_cmd_length > 10*average_cmd_length
